import java.util.*;

class Solution {
    public int solution(String str1, String str2) {
        List<String> str1List = new ArrayList<>();  // str1의 다중집합 원소를 담을 리스트
        List<String> str2List = new ArrayList<>();  // str2의 다중집합 원소를 담을 리스트
        int size1 = str1.length();                  // str1의 길이
        int size2 = str2.length();                  // str2의 길이

        // str1의 다중집합 원소 채우기
        for(int i = 0; i < size1-1; ++i) {
            Character curchar1 = str1.charAt(i);
            Character curchar2 = str1.charAt(i+1);
            if(!(((curchar1 >= 65 && curchar1 <= 90) || (curchar1 >= 97 && curchar1 <= 122)) &&
                ((curchar2 >= 65 && curchar2 <= 90) || (curchar2 >= 97 && curchar2 <= 122)))) {
                continue;
            }

            String curstr = "";
            if(curchar1 >= 97 && curchar1 <= 122) {
                curchar1 = (char)((int)curchar1 - 32);
            }
            curstr += curchar1;
            if(curchar2 >= 97 && curchar2 <= 122) {
                curchar2 = (char)((int)curchar2 - 32);
            }
            curstr += curchar2;
            str1List.add(curstr);
        }

        // str2의 다중집합 원소 채우기
        for(int i = 0; i < size2-1; ++i) {
            Character curchar1 = str2.charAt(i);
            Character curchar2 = str2.charAt(i+1);
            if(!(((curchar1 >= 65 && curchar1 <= 90) || (curchar1 >= 97 && curchar1 <= 122)) &&
                ((curchar2 >= 65 && curchar2 <= 90) || (curchar2 >= 97 && curchar2 <= 122)))) {
                continue;
            }

            String curstr = "";
            if(curchar1 >= 97 && curchar1 <= 122) {
                curchar1 = (char)((int)curchar1 - 32);
            }
            curstr += curchar1;
            if(curchar2 >= 97 && curchar2 <= 122) {
                curchar2 = (char)((int)curchar2 - 32);
            }
            curstr += curchar2;
            str2List.add(curstr);
        }


        int sum = 0;    // 합집합의 개수를 담을 변수
        int inter = 0;  // 교집합의 개수를 담을 변수

        // str1List의 크기와 str2List의 크기 중 큰 것을 기준으로 작은 것 순회하며 비교
        if(str1List.size() >= str2List.size()) {
            sum = str1List.size();
            for(int i = 0; i < str2List.size(); ++i) {
                int index = str1List.indexOf(str2List.get(i));
                if(index == -1) {   // 기존 집합과 포함되지 않은 원소가 있으면 합집합 개수 증가
                    ++sum;
                } else {            // 기존 집합에 포함되는 원소가 있으면 중복제거를 위해 삭제 후 교집합 개수 증가
                    str1List.remove(index);
                    ++inter;
                }
            }
        } else {
            sum = str2List.size();
            for(int i = 0; i < str1List.size(); ++i) {
                int index = str2List.indexOf(str1List.get(i));
                if(index == -1) {
                    ++sum;
                } else {
                    str2List.remove(index);
                    ++inter;
                }
            }
        }

        if(sum != 0) {
            return inter * 65536 / sum;
        }

        return 65536;
    }
}